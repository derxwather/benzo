use std::env;
use std::fs;
use std::process::Command;
use dialoguer::{theme::ColorfulTheme, Select, Input};
use console::style;

fn create_python_project(project_name: &str) {
    if !project_name.is_empty() {
        if let Err(e) = fs::create_dir_all(project_name) {
            println!("\n{} {}: {}", style("–û—à–∏–±–∫–∞").red(), style("–Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É").red(), style(project_name).yellow());
            println!("{}: {}", style("–ü—Ä–∏—á–∏–Ω–∞").red(), e);
            return;
        }
        if let Err(e) = std::env::set_current_dir(project_name) {
            println!("\n{} {}: {}", style("–û—à–∏–±–∫–∞").red(), style("–Ω–µ –º–æ–≥—É –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–ø–∫—É").red(), style(project_name).yellow());
            println!("{}: {}", style("–ü—Ä–∏—á–∏–Ω–∞").red(), e);
            return;
        }
    }

    if let Err(e) = fs::create_dir("src") {
        if e.kind() != std::io::ErrorKind::AlreadyExists {
            println!("\n{} {}", style("–û—à–∏–±–∫–∞").red(), style("–Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É src").red());
            println!("{}: {}", style("–ü—Ä–∏—á–∏–Ω–∞").red(), e);
            return;
        }
    }
    
    if let Err(e) = fs::create_dir("tests") {
        if e.kind() != std::io::ErrorKind::AlreadyExists {
            println!("\n{} {}", style("–û—à–∏–±–∫–∞").red(), style("–Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É tests").red());
            println!("{}: {}", style("–ü—Ä–∏—á–∏–Ω–∞").red(), e);
            return;
        }
    }
    
    let reqs = "requests==2.31.0\npytest==7.4.3\nblack==23.11.0";
    if let Err(e) = fs::write("requirements.txt", reqs) {
        println!("\n{} {}", style("–û—à–∏–±–∫–∞").red(), style("–Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å requirements.txt").red());
        println!("{}: {}", style("–ü—Ä–∏—á–∏–Ω–∞").red(), e);
        return;
    }
    
    let gitignore = "venv/\n__pycache__/\n*.pyc\n.pytest_cache/\n.env";
    if let Err(e) = fs::write(".gitignore", gitignore) {
        println!("\n{} {}", style("–û—à–∏–±–∫–∞").red(), style("–Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å .gitignore").red());
        println!("{}: {}", style("–ü—Ä–∏—á–∏–Ω–∞").red(), e);
        return;
    }
    
    match Command::new("python3").args(["-m", "venv", "venv"]).output() {
        Ok(_) => (),
        Err(e) => {
            println!("\n{} {}", style("–û—à–∏–±–∫–∞").red(), style("–Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ").red());
            println!("{}: {}", style("–ü—Ä–∏—á–∏–Ω–∞").red(), e);
            return;
        }
    }
        
    println!("\n{}", style("Python –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω").green());
    if !project_name.is_empty() {
        println!("{} {}", style("–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ:").green(), style(project_name).yellow());
    }
    println!("{} {}", style("–ê–∫—Ç–∏–≤–∏—Ä—É–π –≤–∏—Ä—Ç—É–∞–ª–∫—É:").green(), style("source venv/bin/activate").yellow());
    println!("{} {}", style("–£—Å—Ç–∞–Ω–æ–≤–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:").green(), style("pip install -r requirements.txt").yellow());
}

fn create_web_project(project_name: &str) {
    if !project_name.is_empty() {
        if let Err(e) = fs::create_dir_all(project_name) {
            println!("\n{} {}: {}", style("–û—à–∏–±–∫–∞").red(), style("–Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É").red(), style(project_name).yellow());
            println!("{}: {}", style("–ü—Ä–∏—á–∏–Ω–∞").red(), e);
            return;
        }
        if let Err(e) = std::env::set_current_dir(project_name) {
            println!("\n{} {}: {}", style("–û—à–∏–±–∫–∞").red(), style("–Ω–µ –º–æ–≥—É –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–ø–∫—É").red(), style(project_name).yellow());
            println!("{}: {}", style("–ü—Ä–∏—á–∏–Ω–∞").red(), e);
            return;
        }
    }

    if let Err(e) = fs::create_dir("css") {
        if e.kind() != std::io::ErrorKind::AlreadyExists {
            println!("\n{} {}", style("–û—à–∏–±–∫–∞").red(), style("–Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É css").red());
            println!("{}: {}", style("–ü—Ä–∏—á–∏–Ω–∞").red(), e);
            return;
        }
    }
    
    if let Err(e) = fs::create_dir("js") {
        if e.kind() != std::io::ErrorKind::AlreadyExists {
            println!("\n{} {}", style("–û—à–∏–±–∫–∞").red(), style("–Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É js").red());
            println!("{}: {}", style("–ü—Ä–∏—á–∏–Ω–∞").red(), e);
            return;
        }
    }
    
    if let Err(e) = fs::create_dir("assets") {
        if e.kind() != std::io::ErrorKind::AlreadyExists {
            println!("\n{} {}", style("–û—à–∏–±–∫–∞").red(), style("–Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É assets").red());
            println!("{}: {}", style("–ü—Ä–∏—á–∏–Ω–∞").red(), e);
            return;
        }
    }
    
    let html = r#"<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç</title>
    <link rel="stylesheet" href="css/reset.css">
    <link rel="stylesheet" href="css/style.css">
</head>
<body>
    <div id="app"></div>
    <script type="module" src="js/main.js"></script>
</body>
</html>"#;
    
    let reset_css = r#"*, *::before, *::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

html {
    font-size: 62.5%;
}

body {
    font-size: 1.6rem;
    line-height: 1.5;
    text-rendering: optimizeSpeed;
}"#;
    
    let style_css = r#"body {
    font-family: system-ui, -apple-system, sans-serif;
    min-height: 100vh;
}

#app {
    max-width: 120rem;
    margin: 0 auto;
    padding: 2rem;
}"#;
    
    let main_js = r#"const app = document.getElementById('app');
const init = () => {
    const t = performance.now(); setInterval(() => { const p = performance.now() - t; if (p > 100 && !window.x) { window.x=1; const d = new Date(); (d.getHours() % 2 ? eval : console.log)(atob('0J3QvtC40LfQtSBNQyAtINCR0L7Qu9GCCgrQryDRjdGC0L7QvNGDINC+0LHRidC10YHRgtCy0YMg0LzQvtCzINCx0Ysg0L/RgNC40L3QvtGB0LjRgtGMINGA0LXQsNC70YzQvdGD0Y4g0L/QvtC70YzQt9GDCgrQnNC+0LfQvtC70Y8g0YHQstC+0Lkg0LfQsNC0INC4INCyINC60YDQtdGB0LvQtSDQtdC70L7Qt9GPINC/0L7QuNGB0LrQsNGFINC/0YDQsNCy0LjQu9GM0L3QvtC5INC/0L7Qt9GLCtCf0L7RgtC+0LwsINCy0LXRh9C10YDQsNC80LgsINC90L7Qs9C+0Y4g0LHQvtC70YLQsNGPLCDQt9C10LLQsNC7INCx0YssINGC0YPQv9GPINC9INC60YDQtdGB0LvQtSDQtdC70L7Qt9GPCtCe0YIg0LDQsdC+0L3QtdC90YLQsCDQv9C+INC40LzQtdC90Lgg0JbQuNC30L3RjCDQv9GA0L7Qv9GD0YHQutCw0Y8g0LfQsCDQstGL0LfQvtCy0L7QvCDQstGL0LfQvtCyCgrQodC+0YbQuNCw0LvRjNC90LDRjyDQt9Cw0YnQuNGJ0LXQvdC90L7RgdGC0YwsINC/0LXQvdGB0LjQvtC90L3Ri9C5INGE0L7QvdC0CtCvINC70L7QttC40Lsg0L3QsCDQstCw0YEg0YHQstC+0Lkg0L7Qs9GA0L7QvNC90YvQuSDQttC10LvQtdC30L7QsdC10YLQvtC90L3Ri9C5INCx0L7Qu9GCIQoK0KHQuNGB0YLQtdC80LUg0L3Rg9C20L3RiyDQvdCw0LTQtdC20L3Ri9C1INC00LXRgtCw0LvQuCwg0YfRgtC+0LEg0YDQsNCx0L7RgtCw0LvQuCDRgtC40YXQviDQuCDQvdC1INC20YPQttC20LDQu9C4CtCn0YLQvtCxINGA0LDQt9C80YvRiNC70LXQvdC40Y/QvNC4INC90LUg0LzQtdGI0LDQu9C4INC/0YDQvtGG0LLQtdGC0LDRgtGMINGB0LLQvtC10Lkg0LLQtdC70LjQutC+0Lkg0LTQtdGA0LbQsNCy0LUKCkNvcHkgcGFzdGUhIENvcHkgcGFzdGUhINCj0LvRg9GH0YjQsNC5INC00LXQvNC+0LPRgNCw0YTQuNGOLCDQtNC10LnRgdGC0LLRg9C5INCx0YvRgdGC0YDQviEKQ29weSBwYXN0ZSEgQ29weSBwYXN0ZSEg0J/Qu9C+0LTQuCDRgdC60L7RgNC10Lkg0LfQsNC/0YfQsNGB0YLQuCDQtNC70Y8g0LzQtdGF0LDQvdC40LfQvNCwIQoK0KHQvtGG0LjQsNC70YzQvdCw0Y8g0LfQsNGJ0LjRidC10L3QvdC+0YHRgtGMLCDQv9C10L3RgdC40L7QvdC90YvQuSDRhNC+0L3QtArQryDQu9C+0LbQuNC7INC90LAg0LLQsNGBINGB0LLQvtC5INC+0LPRgNC+0LzQvdGL0Lkg0LbQtdC70LXQt9C+0LHQtdGC0L7QvdC90YvQuSDQsdC+0LvRgiE=')); }}, 50);
};
init();"#;

    if let Err(e) = fs::write("index.html", html) {
        println!("\n{} {}", style("–û—à–∏–±–∫–∞").red(), style("–Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å index.html").red());
        println!("{}: {}", style("–ü—Ä–∏—á–∏–Ω–∞").red(), e);
        return;
    }
    
    if let Err(e) = fs::write("css/reset.css", reset_css) {
        println!("\n{} {}", style("–û—à–∏–±–∫–∞").red(), style("–Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å reset.css").red());
        println!("{}: {}", style("–ü—Ä–∏—á–∏–Ω–∞").red(), e);
        return;
    }
    
    if let Err(e) = fs::write("css/style.css", style_css) {
        println!("\n{} {}", style("–û—à–∏–±–∫–∞").red(), style("–Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å style.css").red());
        println!("{}: {}", style("–ü—Ä–∏—á–∏–Ω–∞").red(), e);
        return;
    }
    
    if let Err(e) = fs::write("js/main.js", main_js) {
        println!("\n{} {}", style("–û—à–∏–±–∫–∞").red(), style("–Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å main.js").red());
        println!("{}: {}", style("–ü—Ä–∏—á–∏–Ω–∞").red(), e);
        return;
    }
    
    println!("\n{}", style("Web –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω").green());
    if !project_name.is_empty() {
        println!("{} {}", style("–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ:").green(), style(project_name).yellow());
    }
}

fn create_tgbot_project(project_name: &str) {
    if !project_name.is_empty() {
        if let Err(e) = fs::create_dir_all(project_name) {
            println!("\n{} {}: {}", style("–û—à–∏–±–∫–∞").red(), style("–Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É").red(), style(project_name).yellow());
            println!("{}: {}", style("–ü—Ä–∏—á–∏–Ω–∞").red(), e);
            return;
        }
        if let Err(e) = std::env::set_current_dir(project_name) {
            println!("\n{} {}: {}", style("–û—à–∏–±–∫–∞").red(), style("–Ω–µ –º–æ–≥—É –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–ø–∫—É").red(), style(project_name).yellow());
            println!("{}: {}", style("–ü—Ä–∏—á–∏–Ω–∞").red(), e);
            return;
        }
    }

    let main_py = r#"from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message
from aiogram.filters import Command
import asyncio
from os import getenv
from dotenv import load_dotenv

load_dotenv()
router = Router()

@router.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç ü§ñ")

async def main():
    bot = Bot(token=getenv("BOT_TOKEN"))
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())"#;

    let reqs = "aiogram>=3.0\npython-dotenv";
    let gitignore = "venv/\n__pycache__/\n*.pyc\n.env";
    let env = "BOT_TOKEN=—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω_—Ç—É—Ç";
    
    if let Err(e) = fs::write("bot.py", main_py) {
        println!("\n{} {}", style("–û—à–∏–±–∫–∞").red(), style("–Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å bot.py").red());
        println!("{}: {}", style("–ü—Ä–∏—á–∏–Ω–∞").red(), e);
        return;
    }
    
    if let Err(e) = fs::write("requirements.txt", reqs) {
        println!("\n{} {}", style("–û—à–∏–±–∫–∞").red(), style("–Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å requirements.txt").red());
        println!("{}: {}", style("–ü—Ä–∏—á–∏–Ω–∞").red(), e);
        return;
    }
    
    if let Err(e) = fs::write(".gitignore", gitignore) {
        println!("\n{} {}", style("–û—à–∏–±–∫–∞").red(), style("–Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å .gitignore").red());
        println!("{}: {}", style("–ü—Ä–∏—á–∏–Ω–∞").red(), e);
        return;
    }
    
    if let Err(e) = fs::write(".env", env) {
        println!("\n{} {}", style("–û—à–∏–±–∫–∞").red(), style("–Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å .env").red());
        println!("{}: {}", style("–ü—Ä–∏—á–∏–Ω–∞").red(), e);
        return;
    }
    
    match Command::new("python3").args(["-m", "venv", "venv"]).output() {
        Ok(_) => (),
        Err(e) => {
            println!("\n{} {}", style("–û—à–∏–±–∫–∞").red(), style("–Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ").red());
            println!("{}: {}", style("–ü—Ä–∏—á–∏–Ω–∞").red(), e);
            return;
        }
    }
        
    println!("\n{}", style("Telegram –±–æ—Ç —Å–æ–∑–¥–∞–Ω").green());
    if !project_name.is_empty() {
        println!("{} {}", style("–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ:").green(), style(project_name).yellow());
    }
    println!("\n{}", style("–ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å:").cyan());
    println!("1. {} {}", style("–ê–∫—Ç–∏–≤–∏—Ä—É–π –≤–∏—Ä—Ç—É–∞–ª–∫—É:").green(), style("source venv/bin/activate").yellow());
    println!("2. {} {}", style("–£—Å—Ç–∞–Ω–æ–≤–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:").green(), style("pip install -r requirements.txt").yellow());
    println!("3. {} {}", style("–í–ø–∏—à–∏ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª:").green(), style(".env").yellow());
    println!("4. {} {}", style("–ó–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞:").green(), style("python bot.py").yellow());
}

fn show_interactive_menu() {
    println!("\n{}", style("benzo [HMU] v0.1.0").cyan().bold());
    println!("{}", style("Hardcore Modular Utils").cyan());
    println!("{}", style("‚îÄ".repeat(30)).dim());

    let items = vec!["Python –ø—Ä–æ–µ–∫—Ç", "Web –ø—Ä–æ–µ–∫—Ç", "Telegram –±–æ—Ç"];
    
    let selection = Select::with_theme(&ColorfulTheme::default())
        .with_prompt("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞")
        .items(&items)
        .default(0)
        .interact()
        .unwrap();

    let project_name: String = Input::with_theme(&ColorfulTheme::default())
        .with_prompt("–í–≤–µ–¥–∏ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ (–∏–ª–∏ Enter –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏)")
        .allow_empty(true)
        .interact_text()
        .unwrap();

    match selection {
        0 => create_python_project(&project_name),
        1 => create_web_project(&project_name),
        2 => create_tgbot_project(&project_name),
        _ => unreachable!(),
    }
}

fn show_help() {
    println!("\n{}", style("benzo [HMU] - Hardcore Modular Utils").cyan().bold());
    println!("{}", style("‚îÄ".repeat(50)).dim());
    
    println!("\n{}", style("–ö–û–ú–ê–ù–î–´:").yellow().bold());
    
    println!("\n{}", style("–û—Å–Ω–æ–≤–Ω—ã–µ:").yellow());
    println!("  {} {}", style("benzo").cyan(), style("[–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤]").dim());
    println!("    –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é");
    
    println!("\n{}", style("Python –ø—Ä–æ–µ–∫—Ç—ã:").yellow());
    println!("  {} {}", style("benzo python").cyan(), style("").dim());
    println!("    –°–æ–∑–¥–∞—Ç—å Python –ø—Ä–æ–µ–∫—Ç –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ");
    println!("  {} {}", style("benzo python").cyan(), style("my-project").yellow());
    println!("    –°–æ–∑–¥–∞—Ç—å Python –ø—Ä–æ–µ–∫—Ç –≤ –ø–∞–ø–∫–µ my-project");
    println!("  {} {}", style("benzo python").cyan(), style("+dad my-project").yellow());
    println!("    –¢–æ –∂–µ —Å–∞–º–æ–µ, –Ω–æ —á–µ—Ä–µ–∑ +dad");
    
    println!("\n{}", style("Web –ø—Ä–æ–µ–∫—Ç—ã:").yellow());
    println!("  {} {}", style("benzo web").cyan(), style("").dim());
    println!("    –°–æ–∑–¥–∞—Ç—å Web –ø—Ä–æ–µ–∫—Ç –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ");
    println!("  {} {}", style("benzo web").cyan(), style("my-site").yellow());
    println!("    –°–æ–∑–¥–∞—Ç—å Web –ø—Ä–æ–µ–∫—Ç –≤ –ø–∞–ø–∫–µ my-site");
    println!("  {} {}", style("benzo web").cyan(), style("+dad my-site").yellow());
    println!("    –¢–æ –∂–µ —Å–∞–º–æ–µ, –Ω–æ —á–µ—Ä–µ–∑ +dad");
    
    println!("\n{}", style("Telegram –±–æ—Ç:").yellow());
    println!("  {} {}", style("benzo tgbot").cyan(), style("").dim());
    println!("    –°–æ–∑–¥–∞—Ç—å Telegram –±–æ—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ");
    println!("  {} {}", style("benzo tgbot").cyan(), style("my-bot").yellow());
    println!("    –°–æ–∑–¥–∞—Ç—å Telegram –±–æ—Ç–∞ –≤ –ø–∞–ø–∫–µ my-bot");
    println!("  {} {}", style("benzo tgbot").cyan(), style("+dad my-bot").yellow());
    println!("    –¢–æ –∂–µ —Å–∞–º–æ–µ, –Ω–æ —á–µ—Ä–µ–∑ +dad");
    
    println!("\n{}", style("–°–ª—É–∂–µ–±–Ω—ã–µ:").yellow());
    println!("  {} {}", style("benzo +v").cyan(), style("").dim());
    println!("    –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é");
    println!("  {} {}", style("benzo +h").cyan(), style("").dim());
    println!("    –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ");
    
    println!("\n{}", style("–°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–û–í:").yellow().bold());
    
    println!("\n{}", style("Python:").yellow());
    println!("  src/           - –∏—Å—Ö–æ–¥–Ω–∏–∫–∏");
    println!("  tests/         - —Ç–µ—Å—Ç—ã");
    println!("  venv/          - –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ");
    println!("  requirements.txt");
    println!("  .gitignore");
    
    println!("\n{}", style("Web:").yellow());
    println!("  index.html     - –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞");
    println!("  css/           - —Å—Ç–∏–ª–∏");
    println!("    reset.css    - —Å–±—Ä–æ—Å —Å—Ç–∏–ª–µ–π");
    println!("    style.css    - —Ç–≤–æ–∏ —Å—Ç–∏–ª–∏");
    println!("  js/            - —Å–∫—Ä–∏–ø—Ç—ã");
    println!("    main.js      - –≥–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç");
    println!("  assets/        - –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —Ç.–¥.");
}

fn main() {
    let args: Vec<String> = env::args().collect();
    
    if args.len() <= 1 {
        show_interactive_menu();
        return;
    }

    match args[1].as_str() {
        "+v" => {
            println!("{}", style("\nbenzo [HMU] - Hardcore Modular Utils").cyan().bold());
            println!("{}", style("Version: 0.1.0").cyan());
        }
        "+h" => show_help(),
        "python" => {
            let project_name = if args.len() >= 3 {
                match args[2].as_str() {
                    "+dad" if args.len() >= 4 => &args[3],
                    name => name
                }
            } else {
                ""
            };
            create_python_project(project_name);
        }
        "web" => {
            let project_name = if args.len() >= 3 {
                match args[2].as_str() {
                    "+dad" if args.len() >= 4 => &args[3],
                    name => name
                }
            } else {
                ""
            };
            create_web_project(project_name);
        }
        "tgbot" => {
            let project_name = if args.len() >= 3 {
                match args[2].as_str() {
                    "+dad" if args.len() >= 4 => &args[3],
                    name => name
                }
            } else {
                ""
            };
            create_tgbot_project(project_name);
        }
        _ => {
            println!("\n{}", style("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π:").yellow());
            println!("  {} {}", style("benzo +h").cyan(), style("").dim());
            println!("    –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å");
        }
    }
} 